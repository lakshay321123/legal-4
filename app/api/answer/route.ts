import { NextResponse } from 'next/server';

export async function POST(req: Request) {
  try {
    const body = await req.json().catch(() => ({}));
    const q: string = body.q ?? '';
    const mode: 'citizen' | 'lawyer' = body.mode === 'lawyer' ? 'lawyer' : 'citizen';

    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return NextResponse.json(
        { answer: '❌ Missing OPENAI_API_KEY on the server.' },
        { status: 500 }
      );
    }
    if (!q.trim()) {
      return NextResponse.json({ answer: 'Please ask a question.' }, { status: 400 });
    }

    const system =
      mode === 'lawyer'
        ? 'You are a legal research assistant. Be precise, concise, and include authorities when possible.'
        : 'You are a helpful legal explainer. Use simple, plain language and short paragraphs.';

    const res = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: system },
          { role: 'user', content: q }
        ],
        max_tokens: 400
      })
    });

    if (!res.ok) {
      const text = await res.text().catch(() => '');
      console.error('OpenAI error:', res.status, text);
      return NextResponse.json(
        { answer: `⚠️ OpenAI request failed (${res.status}).` },
        { status: 500 }
      );
    }

    const data = await res.json();
    const answer =
      data?.choices?.[0]?.message?.content ??
      'No answer generated by the model.';

    return NextResponse.json({ answer, sources: [] });
  } catch (err) {
    console.error('answer route error', err);
    return NextResponse.json(
      { answer: '⚠️ Error talking to OpenAI. Check API key and logs.' },
      { status: 500 }
    );
  }
}

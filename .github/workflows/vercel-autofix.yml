name: Vercel Deploy with AI Autofix

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write        # commit changes
  pull-requests: write   # open PRs
  actions: read

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      AUTO_COMMIT: ${{ secrets.AUTO_COMMIT }}
    steps:
      - name: Checkout
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm i -g vercel@^33

      - name: Pull Vercel env
        run: vercel pull --yes --environment=production --token "$VERCEL_TOKEN"

      - name: Build (capture logs)
        id: build
        run: |
          set -o pipefail
          vercel build --prod --token "$VERCEL_TOKEN" 2>&1 | tee build.log
        continue-on-error: true

      - name: Upload build log (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: build.log

      - name: If build OK → Deploy
        if: steps.build.outcome == 'success'
        run: |
          echo "Build OK. Deploying prebuilt..."
          vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN"

      - name: If build FAILED → Run AI autofix
        if: steps.build.outcome != 'success'
        run: |
          echo "Build failed. Running AI autofix..."
          node scripts/ai-fix.mjs build.log

      - name: If AI made changes → push or PR
        if: steps.build.outcome != 'success'
        run: |
          if git status --porcelain | grep -q .; then
            FIX_BRANCH="ai-fix-$(date +%s)"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git checkout -b "$FIX_BRANCH"
            git add -A
            git commit -m "AI autofix: apply patch from build failure"
            git push -u origin "$FIX_BRANCH"

            if [ "${AUTO_COMMIT}" = "true" ]; then
              echo "AUTO_COMMIT=true → merging directly into main"
              git checkout main
              git merge --no-ff "$FIX_BRANCH" -m "Merge AI autofix $FIX_BRANCH"
              git push origin main
            else
              echo "Opening PR for review..."
              gh pr create --title "AI autofix: build failure $(date -u +'%Y-%m-%d %H:%M UTC')" \
                --body "This PR was auto-created after a failed Vercel build. Changes generated by AI from build.log." \
                --base main --head "$FIX_BRANCH" || true
            fi
          else
            echo "AI suggested no code changes."
          fi

      - name: Rebuild (after fix)
        if: steps.build.outcome != 'success'
        run: |
          set -o pipefail
          vercel build --prod --token "$VERCEL_TOKEN" 2>&1 | tee build_after_fix.log
        continue-on-error: true

      - name: Upload rebuild log
        if: steps.build.outcome != 'success'
        uses: actions/upload-artifact@v4
        with:
          name: build-after-fix-log
          path: build_after_fix.log

      - name: If rebuild OK → Deploy
        if: steps.build.outcome != 'success' && success()
        run: |
          echo "Rebuild OK. Deploying prebuilt..."
          vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN"
